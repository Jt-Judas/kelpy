# -*- coding: utf-8 -*-


from kelpy.CommandableSprites import *
from pygame import *
from random import randint
from pygame.gfxdraw import aacircle 
class DotStimulus(CommandableSprite):
	"""
		A bunch of random dots in a circle
	"""
	
	def __init__(self, screen, init_position, N=10, radius=10, pad=10, height=200, width=200, circle_width=0, bg_color=(90,90,90), dot_color=(0,0,255), circled=True, circle_color=(255,255,255)):
		"""
			N = number of dots
			radius = radius of dots
			pad = pad between dots
			circle_width -- if 0, we fill; else we draw an outline
			If circled, we require that all the dots are within min(height/2,width/2) of the center
		"""
		CommandableSprite.__init__(self, screen, init_position)
		
		
		self.height=height
		self.width =width
		self.radius = radius
		self.pad = pad
		self.N = N
		self.bg_color=bg_color
		self.circle_color=circle_color
		self.dot_color=dot_color
		self.screen = screen
		self.circle_width = circle_width
		self.circled=circled
		
		self.dot_positions = []
		while len(self.dot_positions) < N:
			
			posx = randint(radius+pad, width-radius-pad)
			posy = randint(radius+pad, height-radius-pad)
			
			if circled and ((posx-self.width/2)**2 + (posy-self.height/2)**2)**0.5 > min(self.width/2,self.height/2)-2.*pad: 
				continue
			
			keep = True
			for x,y in self.dot_positions:
				if ((posx - x)**2 + (posy-y)**2)**0.5 < radius + 2.*pad:
					keep = False
					break
			
			if keep:
				self.dot_positions.append( (posx,posy) )
		
	def to_image(f="img.png"):
		
		
		
		
		pass
		
	
	def update(self):
		CommandableSprite.update(self)
		
		mx = self.get_x()
		my = self.get_y()
		
		l = self.get_left()
		t = self.get_top()
		
		#pygame.draw.circle(Surface, color, pos, radius, width=0): return Rect
		pygame.draw.rect(self.screen,self.bg_color,self.get_pygame_Rect())
		
		if self.circled:
			pygame.draw.circle(self.screen, self.circle_color, (mx, my), min(self.width/2,self.height/2) )
			#aacircle(self.screen, mx, my, min(self.width/2,self.height/2), self.circle_color)
		
		for dx,dy in self.dot_positions:
			#print dx,dy
			pygame.draw.circle(self.screen, self.dot_color, (dx+l, dy+t), self.radius, self.circle_width)
			#aacircle(self.screen, dx+l, dy+t, self.radius, self.dot_color)
		
		
		
		
		
		